@model IEnumerable<Aplicacion.Models.Turnos>
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;

@{
	ViewData["Title"] = "Index";
}
<link href="https://fonts.googleapis.com/css?family=Lato:300,400,700&display=swap" rel="stylesheet">

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="css/estiloCalendario.css">
<div class="container" style="margin-top: 100px;">
	<div class="col-lg-7 text-center text-lg-start">
		<p class="display-6 fw-bold mb-1" style="font-weight: 500!important;">
			<i class="fa-solid fa-dog fa-md"></i>
			Turnos
		</p>
	</div>
</div>

@if (User.Identity.IsAuthenticated)
{

	<section class="ftco-section" id="seccion" data-usuario-mail="@User.FindFirstValue("email")">
		<div class="container">
			<div class="row ">
				<div class="col-xl-12 ">
					<div class="content w-100">
						<div class="calendar-container">
							<div class="calendar">
								<div class="year-header">
									<span class="left-button fa fa-chevron-left" id="prev"> </span>
									<span class="year" id="label"></span>
									<span class="right-button fa fa-chevron-right" id="next"> </span>
								</div>
								<table class="months-table w-100">
									<tbody>
										<tr class="months-row">
											<td class="month">Ene</td>
											<td class="month">Feb</td>
											<td class="month">Mar</td>
											<td class="month">Abr</td>
											<td class="month">May</td>
											<td class="month">Jun</td>
											<td class="month">Jul</td>
											<td class="month">Ago</td>
											<td class="month">Sep</td>
											<td class="month">Oct</td>
											<td class="month">Nov</td>
											<td class="month">Dic</td>
										</tr>
									</tbody>
								</table>

								<table class="days-table w-100">
									<td class="day">Dom</td>
									<td class="day">Lun</td>
									<td class="day">Mar</td>
									<td class="day">Mie</td>
									<td class="day">Jue</td>
									<td class="day">Vie</td>
									<td class="day">Sab</td>
								</table>
								<div class="frame">
									<table class="dates-table w-100">
										<tbody class="tbody">
										</tbody>
									</table>
								</div>
								@if (!User.IsInRole("Administrador"))
								{
									<button class="button d-none" disabled id="add-button">Solicitar turno</button>
								}
								else
								{
									<div class="d-flex justify-content-center">
										<div>
											<label class="form-check-label" for="flexCheckDefault" style="font-size: 16px;">Aceptados</label>
											<input type="checkbox" class=" mb-3 activa estados" checked id="aceptados-check">
										</div>

										<div class=" mx-3">
											<label class="form-check-label" for="flexCheckDefault" style="font-size: 16px;">
												Rechazados
											</label>
											<input type="checkbox" class="activa estados" checked id="rechazados-check">
										</div>
										<div>
											<label class="form-check-label" for="flexCheckDefault" style="font-size: 16px;">Pendientes</label>
											<input type="checkbox" class=" mb-3 activa estados" checked id="pendientes-check">
										</div>
									</div>
								}


							</div>
						</div>
						<div class="events-container">
						</div>
					</div>


				</div>
				@if (User.IsInRole("Administrador"))
				{<div class="col-xl-12 mt-1">
						<div class="alert alert-info" role="alert" style="    line-height: normal;
    margin: auto auto;
    max-width: 790px;
    height: 140px;">
						<p>
							<strong>
								Estado de turnos:
							</strong>
							<br>
							<div style="margin-left:120px;">
								<div>
									<div class="color-turno  d-inline-block" style="position:relative;background:#6aa84f;"></div>
									Aceptados
								</div>

								<div>
									<div class="color-turno2 d-inline-block" style="position:relative;left:0px;background:#FF1744;"></div>
									Rechazados
								</div>
								<div>
									<div class="color-turno3  d-inline-block" style="position:relative;left:0px;background:#f1c232"></div>
									Pendientes
								</div>
							</div>
						</p>

					</div>
					</div>
				}

			</div>
		</div>


	</section>
}
else
{
	<div class="container d-flex align-items-center justify-content-center">
		<h1>
			Para acceder a este sitio debe estar registrado.
		</h1>
		<img class="w-50 h-50" src="/img/PerroError.svg" />
	</div>
}

<!--Inicio Modal Ver detalle pendiente-->
<div class="modal fade" id="detallePendiente" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">
					<i class="fa-solid fa-user-plus fa-xl" style="color: #000000;"></i>
					Turno pendiente
				</h1>
				<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
				<!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
			</div>
			<div class="modal-body">
				<div autocomplete="off" class="row g-3" novalidate id="formTurnoPendiente">
					<div class="col-md-12">
						<label class="form-label">Cliente</label>
						<div class="input-group has-validation">
							<span class="input-group-text" id="inputGroupPrepend">@@</span>
							<input type="email" maxlength="50" class="form-control"readonly id="mailPendiente" aria-describedby="inputGroupPrepend">
						</div>
					</div>
					
					<div class="col-md-12">
						<label class="form-label">Mascotas</label>
						<input type="text" class="form-control" readonly id="mascotasPendiente" required>
						
					</div>
					<div class="col-md-6">
						<label class="form-label">Fecha solicitada</label>
						<input type="date" maxlength="20" class="form-control" readonly id="fechaPendiente" required>

					</div>
					<div class="col-md-6">
						<label class="form-label">Franja solicitada</label>
						<input type="text" maxlength="20" class="form-control"readonly id="horarioPendiente" required>

					</div>

				
					
					<div class="col-md-6">
						<label class="form-label">Horario final</label>
						<input type="time" maxlength="20" class="form-control"  id="horarioFinalPendiente" required>
						<div class="invalid-feedback">
							Para aceptar el turno debe elegir un horario dentro de la franja horaria
						</div>
					</div>

					<div class="col-md-12">
						<label class="form-label">Motivo</label>
						<input class="form-control" autocomplete="false" id="motivoPendiente" readonly maxlength="50" required>
						
					</div>
					<div class="col-md-12">
						<label class="form-label">Comentarios</label>
						<textarea class="form-control" autocomplete="false" value="" id="comentario"  maxlength="200"></textarea>
						<div class="invalid-feedback">
							Debe ingresar un comentario si desea cancelar el turno(máximo 200 caracteres)
						</div>
					</div>
					
					<div class="modal-footer">
							<div class="d-flex justify-content-center">
								<button tpye="button" class="btn btn-danger mx-2 mb-3" onclick="rechazarTurno()" disabled id="rechazar-button">Rechazar</button>
								<button tpye="button" class="btn btn-success mb-3 activo" onclick="aceptarTurno()" disabled id="aceptar-button">Aceptar</button>
							</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!--Fin modal Turno pendiente detalle-->




<!--Inicio Modal Ver detalle aceptado-->
<div class="modal fade" id="detalleAceptado" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">
					<i class="fa-solid fa-user-plus fa-xl" style="color: #000000;"></i>
					Turno aceptado
				</h1>
				
				<!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
			</div>
			<div class="modal-body">
				<div autocomplete="off" class="row g-3" novalidate id="formTurnoAceptado">
					<div class="col-md-12">
						<label class="form-label">Cliente</label>
						<div class="input-group has-validation">
							<span class="input-group-text" id="inputGroupPrepend">@@</span>
							<input type="email" maxlength="50" class="form-control"readonly id="mailAceptado" aria-describedby="inputGroupPrepend">
						</div>
					</div>
					
					<div class="col-md-12">
						<label class="form-label">Mascotas</label>
						<input type="text"  class="form-control" readonly id="mascotasAceptado" required>
						
					</div>
					<div class="col-md-6">
						<label class="form-label">Fecha solicitada</label>
						<input type="date" maxlength="20" class="form-control" readonly id="fechaAceptado" required>

					</div>
					<div class="col-md-6">
						<label class="form-label">Franja solicitada</label>
						<input type="text" maxlength="20" class="form-control"readonly id="horarioAceptado" required>

					</div>

				
					
					<div class="col-md-6">
						<label class="form-label">Horario final</label>
						<input type="time" maxlength="20" class="form-control" readonly  id="horarioFinalAceptado" required>
						<div class="invalid-feedback">
							Para aceptar el turno debe elegir un horario dentro de la franja horaria
						</div>
					</div>

					<div class="col-md-12">
						<label class="form-label">Motivo</label>
						<input class="form-control" autocomplete="false" id="motivoAceptado" readonly maxlength="50" required>
						
					</div>
					<div class="col-md-12">
						<label class="form-label">Comentarios</label>
						<textarea class="form-control" autocomplete="false" value="" id="comentarioAceptado" readonly maxlength="200"></textarea>
						<div class="invalid-feedback">
							Debe ingresar un comentario si desea cancelar el turno(máximo 200 caracteres)
						</div>
					</div>
					
					<div class="modal-footer">
							<div class="d-flex justify-content-center">
								<button tpye="button" class="btn btn-danger mb-3 activo" id="cerrar-button" data-bs-dismiss="modal">Cerrar</button>
							</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!--Fin modal Turno aceptado detalle-->


<!--Inicio Modal Ver detalle aceptado-->
<div class="modal fade" id="detalleRechazado" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">
					<i class="fa-solid fa-user-plus fa-xl" style="color: #000000;"></i>
					Turno rechazado
				</h1>

				<!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
			</div>
			<div class="modal-body">
				<div autocomplete="off" class="row g-3" novalidate id="formTurnoRechazado">
					<div class="col-md-12">
						<label class="form-label">Cliente</label>
						<div class="input-group has-validation">
							<span class="input-group-text" id="inputGroupPrepend">@@</span>
							<input type="email" maxlength="50" class="form-control" readonly id="mailRechazado" aria-describedby="inputGroupPrepend">
						</div>
					</div>

					<div class="col-md-12">
						<label class="form-label">Mascotas</label>
						<input type="text"  class="form-control" readonly id="mascotasRechazado" required>

					</div>
					<div class="col-md-6">
						<label class="form-label">Fecha solicitada</label>
						<input type="date" maxlength="20" class="form-control" readonly id="fechaRechazado" required>

					</div>
					<div class="col-md-6">
						<label class="form-label">Franja solicitada</label>
						<input type="text" maxlength="20" class="form-control" readonly id="horarioRechazado" required>

					</div>



					<div class="col-md-6">
						<label class="form-label">Horario final</label>
						<input type="time" maxlength="20" class="form-control" readonly id="horarioFinalRechazado" required>
						<div class="invalid-feedback">
							Para aceptar el turno debe elegir un horario dentro de la franja horaria
						</div>
					</div>

					<div class="col-md-12">
						<label class="form-label">Motivo</label>
						<input class="form-control" autocomplete="false" id="motivoRechazado" readonly maxlength="50" required>

					</div>
					<div class="col-md-12">
						<label class="form-label">Comentarios</label>
						<textarea class="form-control" autocomplete="false" value="" id="comentarioRechazado" readonly maxlength="200"></textarea>
						<div class="invalid-feedback">
							Debe ingresar un comentario si desea cancelar el turno(máximo 200 caracteres)
						</div>
					</div>

					<div class="modal-footer">
						<div class="d-flex justify-content-center">
							<button tpye="button" class="btn btn-danger mb-3 activo" id="cerrar-button" data-bs-dismiss="modal">Cerrar</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!--Fin modal Turno rechazado detalle-->



<!--Inicio Modal Solicitar turno-->
<div class="modal fade" id="ModalDatosTurno" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">
					<i class="fa-solid fa-envelope fa-xl"></i>
					Solicitud de turno
				</h1>
				<!--<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>-->
			</div>
			<div class="modal-body">
				<form autocomplete="off" class="row g-3" id="form-turnos" novalidate data-usuario-mail="@User.FindFirstValue("email")">
					
					<div class="col-md-12 mt-3">
						<label class="form-label" style="font-size:14px;">Agregar mascota</label>
						<button type="button" class="mx-5" onclick="agregarCamposMascota()"><i class="fa fa-plus" aria-hidden="true"></i></button>
					</div>
					<div id="mascotas-dinamico">
						
					</div>


					<div class="col-md-12">
						<label for="destinatario" class="form-label">Franja horaria</label>
						<select id="horario">
							<option selected id="franjaMañana">Mañana (8 a 13 hs)</option>
							<option id="franjaTarde">Tarde (17 a 20 hs)</option>
						</select>
					</div>
					

					<div class="col-md-12">
						<label for="validationCustom01" class="form-label">Motivo</label>
						<input type="text" class="form-control" maxlength="100" id="motivo" name="motivo" placeholder="Ej: Vacuna antirrábica, consulta" required>
						<div class="invalid-feedback">
							Ingrese el motivo de su turno! (máximo 100 caracteres)
						</div>
					</div>

					<div class="modal-footer">

						
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancel-button">Cancelar</button>
						<button type="button" class="btn btn-primary"  disabled id="BtnTurno">Enviar</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>
<!--Fin Modal Visualizar Paseador para contacto-->
@section Scripts{

	 


	<!--Por cada mascota se da la opcion de seleccionar de entre sus mascotas o ingresar una nueva. Máximo 5 mascotas-->
	<script>

		var container = $("#mascotas-dinamico");
		function borrarCamposMascota(idBorrado){
			if ($(".mascota").length >1){
				// Obtener la última sección agregada
				var aBorrar = container.find("#mascota"+ idBorrado);
				// Remover la sección del contenedor
				
					var aDesocupar = $("#mascota" + idBorrado + " select option:selected").val();
					$("select[name=misMascotas]").find('option:contains("' + aDesocupar + '")').prop('disabled', false);
				
				
				aBorrar.remove();
				if ($(".mascota").length ==1){
				$("#borrarMascota").addClass("d-none");
				}
				cambiarValor();
				verificarFormulario();
				habilitarBotonEnvioContacto();
			}
		}
		
			function agregarCamposMascota() {
				// Obtener el contenedor donde se generará el bloque dinámico
			
			
				// Crear el elemento div principal
			var divElement = $("<div>").attr("id","mascota"+ ($(".mascota").length +1)).addClass("col-md-12 mascota mt-2 mb-4");
				
				
				// Crear el elemento label
				var labelElement = $("<label>").attr("for", "misMascotas").addClass("form-label").text("Seleccione a su mascota");

				// Crear el elemento select
				var selectElement = $("<select>").attr("name", "misMascotas").addClass("m-2").prop("required", true);
				
				// Crear la opción "Otra" dentro del select
				var optionElement = $("<option>").addClass("otraMascota").text("Otra");
				selectElement.append(optionElement);

				// Crear el div para la opción "Otra"
				var otraDiv = $("<div>").addClass("d-none otra");

				// Crear el label para el input de nombre
				var nombreLabel = $("<label>").addClass("form-label mt-2").text("Nombre");

				// Crear el input de nombre
				var nombreInput = $("<input>").attr({ "type": "text", "maxlength": "20" }).addClass("form-control").prop("required", true);

				// Crear el div para el mensaje de error
				var invalidFeedbackDiv = $("<div>").addClass("invalid-feedback").text("Ingrese una mascota no registrada");

				// Agregar los elementos al div "otra"
				otraDiv.append(nombreLabel, nombreInput, invalidFeedbackDiv);

				// Agregar los elementos al div principal
			
			if ($(".mascota").length>0){
				var buttonEliminar = $('<button id = "borrarMascota' + ($(".mascota").length + 1) + '"class="" onclick = "borrarCamposMascota(' + ($(".mascota").length + 1) + ')"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-square" viewBox="0 0 16 16">< path d = "M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" /><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" /></svg></button>');
				buttonEliminar.addClass("mx-3")
				divElement.append(labelElement, selectElement,buttonEliminar, otraDiv);
				}else{
				divElement.append(labelElement, selectElement, otraDiv);
				}
				// Agregar el div principal al contenedor
				container.append(divElement);

			$.each(mascotasUsuario, function (index, perro) {
				
				var nodoOpcion = $("<option class='otraMascota'>" + perro.Nombre + "</option>");
				var clonNodo = nodoOpcion.clone();
				$("#mascota" + $(".mascota").length + " select").prepend(clonNodo);
			});
			var nodoOpcion = $("<option class='otraMascota'>Seleccione una opcion</option>");
			var clonNodo = nodoOpcion.clone();
			$("#mascota" + $(".mascota").length + " select").prepend(clonNodo);
			for (i = 1; i <= $(".mascota").length; i++) {
				var aOcupar = $("#mascota" + i + " select option:selected").val();
				if (aOcupar != 'Otra') {
					$("select[name=misMascotas]").find('option:contains("' + aOcupar + '")').prop('disabled', true);
				}
			}
			$("#mascota" + ($(".mascota").length) + " select").prop("selectedIndex",0);
			$("#mascota" + ($(".mascota").length) + " select").find('option:contains("' + "Seleccione una opcion" + '")').prop('disabled', true);
			$("#mascota" + ($(".mascota").length) + " select").find('option:contains("' + "Seleccione una opcion" + '")').prop('hidden', true);
			cambiarValor();
			verificarFormulario();
			habilitarBotonEnvioContacto();
			}
			var asunto = document.getElementById('motivo');
			var enviarButtonContacto = document.getElementById('BtnTurno');
			//cambiar valor
			function habilitarBotonEnvioContacto() {
				var val = true;

			var todosValidos = $(".mascota select").toArray().every(function (select) {
				return $(select).hasClass("is-valid");
			});
				
				if (!(todosValidos)) {
						val = false;
					
					}
				
				if (asunto.classList.contains('is-valid') && val) {
					enviarButtonContacto.disabled = false;
				} else {
					enviarButtonContacto.disabled = true;
				}
			}




			var mascotasUsuario;
			function verificarFormulario() {
				asunto.addEventListener('input', validarAsunto);
				$("select[name=misMascotas]").on('input', function () {
					var valor = $(this).val();
					var esValido;
					var mascotaSeleccion = $(this);
					if (valor != 'Otra') {
						mascotaSeleccion.addClass('is-valid');
						mascotaSeleccion.removeClass('is-invalid');
						habilitarBotonEnvioContacto();
					}
					else {
						mascotaSeleccion.removeClass('is-valid');
						$(this).parent().find("div input").on('input', function () {
							var valorBuscar = $(this).val();
							var etiqueta = $(this);
							if (valorBuscar == '') {
								mascotaSeleccion.removeClass('is-valid');
								mascotaSeleccion.addClass('is-invalid');
								etiqueta.removeClass('is-valid');
								etiqueta.addClass('is-invalid');
								habilitarBotonEnvioContacto();
							}
							else {
								var encontre = false;
								$.each(mascotasUsuario, function (index, perro) {
									if (valorBuscar.toLowerCase() == perro.Nombre.toLowerCase()) {

										mascotaSeleccion.removeClass('is-valid');
										mascotaSeleccion.addClass('is-invalid');
										etiqueta.removeClass('is-valid');
										etiqueta.addClass('is-invalid');
										encontre = true;
										return false;
									}

								});
								if (!encontre) {
									mascotaSeleccion.removeClass('is-invalid');
									mascotaSeleccion.addClass('is-valid');
									etiqueta.removeClass('is-invalid');
									etiqueta.addClass('is-valid');
								}
								habilitarBotonEnvioContacto();
							}
						});
					}
				});



				function validarAsunto() {
					if (asunto.value.trim() !== '') {
						asunto.classList.remove('is-invalid');
						asunto.classList.add('is-valid');
					} else {
						asunto.classList.remove('is-valid');
						asunto.classList.add('is-invalid');
					}

					habilitarBotonEnvioContacto();
				}
				// Habilitar o deshabilitar el botón de envío según la validez del formulario
				

				$("#cancel-button").click(function () {
					
					verificarFechas();
					document.getElementById('form-turnos').reset();
					
				for (var i = $(".mascota").length; i >= 1; i--) {
						($("#mascota"+i).remove());
					}
					
					
				
					asunto.classList.remove('is-invalid'); asunto.classList.remove('is-valid');
					
					enviarButtonContacto.disabled = true;
				agregarCamposMascota();
					$(".events-container").show();
				});

			}
			var previous;
			function cambiarValor () {
			$("select[name='misMascotas']").on('focus', function () {
					previous = this.value;
				})
					.change(function () {
						var actual = this.value;
					$("select[name='misMascotas']").find('option:contains("' + previous + '")').prop('disabled', false);
						if (!(actual == "Otra")) {
							$(this).parent().find('div').addClass("d-none");
						$("select[name='misMascotas']").find('option:contains("' + actual + '")').prop('disabled', true);
						} else {
							$(this).parent().find('div').removeClass("d-none");
						}
						previous = this.value;
						habilitarBotonEnvioContacto();
					});
			};
			var emailUsuario = $("#form-turnos").data('usuario-mail'); // Obtener el valor del campo de entrada de 
			$.ajax({
				url: '@Url.Action("obtenerPerros", "Turnos")',
				type: 'GET',
				dataType: 'json',
				data: { mail: emailUsuario }, // Enviar los datos al controlador
				success: function (data) {
				mascotasUsuario=data.slice();	
				agregarCamposMascota();
				$("#add-button").prop("disabled",false);
				cambiarValor();
				verificarFormulario();
				habilitarBotonEnvioContacto();
				},
				error: function (xhr, status, error) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Ocurrio un erorr!'
					})
				}
			});

	</script>

	<script>
		$(document).on('click', '#add-button', function () {
			
		//	Muestra la solicitud del turno
			$('#ModalDatosTurno').modal('show');
		});


		

	</script>


	<script>

		var event_data = {
			"events": [

			]
		};


		




		function cargar_eventos() {
				var emailUsuario = $("section").data('usuario-mail');
				$.ajax({
					url: '@Url.Action("obtenerEventos", "Turnos")',
					type: 'GET',
					async:false,
					dataType: 'json',
					data: { mail: emailUsuario }, // Enviar los datos al controlador
					success: function (data) {
						
						if (data.admin) {
							
							var turnosAsignados = JSON.parse(data.turnos);
							
							event_data["events"].push(true);
							$.each(turnosAsignados, function (index, turno) {
								event_data["events"].push(turno);
								
							})
							
						}
						else {
							var turnosAsignados = JSON.parse(data.turnos);
							event_data["events"].push(false);
							$.each(turnosAsignados, function (index, turno) {
								event_data["events"].push(turno);

							})
						}
					},
					error: function (xhr, status, error) {
						Swal.fire({
							icon: 'error',
							title: 'Oops...',
							text: 'Ocurrio un erorr!'
						})
					}
				});
				
			}



			"use strict";
			const meses = {
				"Ene": 0,
				"Feb": 1,
				"Mar": 2,
				"Abr": 3,
				"May": 4,
				"Jun": 5,
				"Jul": 6,
				"Ago": 7,
				"Sep": 8,
				"Oct": 9,
				"Nov": 10,
				"Dic": 11
			};

			// Setup the calendar with the current date
			$(document).ready( function () {
				var date = new Date();
				var today = date.getDate();
				cargar_eventos();
				// Set click handlers for DOM elements
				$(".right-button").click({ date: date }, next_year);
				$(".left-button").click({ date: date }, prev_year);
				$(".month").click({ date: date }, month_click);
				$("#add-button").click({ date: date }, new_event);
				// Set current month as active
				$(".months-row").children().eq(date.getMonth()).addClass("active-month");
				
				init_calendar(date);
				var events = chequear_events(today, date.getMonth() + 1, date.getFullYear());
				mostrar_eventos(events, date.getMonth() + 1, today);
				
			});
			




			var actual;
			function verificarFechas() {
				var date = new Date();
				actual = new Date(($("#label.year").html()), meses[($(".active-month").html())], parseInt($(".active-date").html()));
				$("#horario").prop("selectedIndex", 0);
				$("#franjaMañana").prop("disabled", false);
				$("#franjaTarde").prop("disabled", false);
				if (($("#label.year").html()) < date.getFullYear()) {
					$("#add-button").addClass("d-none");
					return;
				}
				if ((($("#label.year").html()) == date.getFullYear())
					&& (meses[($(".active-month").html())] < date.getMonth())) {
					$("#add-button").addClass("d-none");
					return;
				}

				if ((($("#label.year").html() == date.getFullYear())
					&& (meses[($(".active-month").html())] == date.getMonth()))
					&& (parseInt($(".active-date").html()) < date.getDate())) {
					$("#add-button").addClass("d-none");
					return;
				}

				if (actual.getDay() == 0) {
					$("#add-button").addClass("d-none");
					return;
				}

				if (actual.getDay() == 6 && date.getHours()>=8 && date.getDay() == 6) {
					$("#add-button").addClass("d-none");
					return;
				}else
					if (actual.getDay() == 6){

						$("#franjaTarde").prop("disabled", true);
					}
				

				if ((($("#label.year").html() == date.getFullYear())
					&& (meses[($(".active-month").html())] == date.getMonth()))
					&& (parseInt($(".active-date").html()) == date.getDate()) && (date.getHours() >=20)){
					$("#add-button").addClass("d-none");
					return;
				}

				if ((($("#label.year").html() == date.getFullYear())
					&& (meses[($(".active-month").html())] == date.getMonth()))
					&& (parseInt($(".active-date").html()) == date.getDate()) && (date.getHours()>=13)) {
					$("#franjaMañana").prop("disabled", true);
					$("#horario").prop("selectedIndex", 1);

				}
				$("#add-button").removeClass("d-none");
			}

		

			// Initialize the calendar by appending the HTML dates
		function init_calendar(date) {
			$(".tbody").empty();
			$(".events-container").empty();
			var calendar_days = $(".tbody");
			var month = date.getMonth();
			var year = date.getFullYear();
			var day_count = days_in_month(month, year);
			var row = $("<tr class='table-row'></tr>");
			var today = date.getDate();


			// Set date to 1 to find the first day of the month
			date.setDate(1);
			var first_day = date.getDay();
			// 35+firstDay is the number of date elements to be added to the dates table
			// 35 is from (7 days in a week) * (up to 5 rows of dates in a month)
			for (var i = 0; i < 35 + first_day; i++) {
				// Since some of the elements will be blank,
				// need to calculate actual date from index
				var day = i - first_day + 1;
				// If it is a sunday, make a new row
				if (i % 7 === 0) {

					calendar_days.append(row);
					row = $("<tr class='table-row'></tr>");
				}
				// if current index isn't a day in this month, make it blank
				if (i < first_day || day > day_count) {
					var curr_date = $("<td class='table-date nil'>" + "</td>");
					row.append(curr_date);
				}
				else {
					var curr_date = $("<td class='table-date'>" + day + "</td>");
					var events = chequear_events(day, month + 1, year);
					if (today === day && $(".active-date").length === 0) {
						curr_date.addClass("active-date");
						//show_events(events, months[month], day);
						mostrar_eventos(events, month + 1, day);
					}
					//Ver despuès
					// If this date has any events, style it with .event-date
					if (events.length > 1) {
						var color;
						if (events[0] == true) {
							var valor = 0;
							if ($("#pendientes-check").hasClass("activa")) {
								if ((events.filter(i => i.Estado == 3).length) > 0) {
									color = "<div class='color-turno' style='background:#f1c232;'></div>";
									curr_date.append(color);
									curr_date.addClass("event-date");
									valor++;
								}
							}
							if ($("#aceptados-check").hasClass("activa")) {
								if ((valor == 0) && ((events.filter(i => i.Estado == 1).length) > 0)) {
									color = "<div class='color-turno' style='background:#6aa84f;'></div>";
									curr_date.append(color);
									curr_date.addClass("event-date");
									valor++;
								}
								else if ((events.filter(i => i.Estado == 1).length) > 0) {
									color = "<div class='color-turno2' style='background:#6aa84f;'></div>";
									curr_date.append(color);
									curr_date.addClass("event-date");
									valor++;
								}
							}
							if ($("#rechazados-check").hasClass("activa")) {
								if ((valor == 0) && ((events.filter(i => i.Estado == 2).length) > 0)) {
									color = "<div class='color-turno' style='background:#FF1744;'></div>";
									curr_date.append(color);
									curr_date.addClass("event-date");
									valor++;
								}
								else if ((valor == 1) && ((events.filter(i => i.Estado == 2).length) > 0)) {
									color = "<div class='color-turno2' style='background:#FF1744;'></div>";
									curr_date.append(color);
									curr_date.addClass("event-date");
									valor++;
								} else if ((valor == 2) && ((events.filter(i => i.Estado == 2).length) > 0)) {
									color = "<div class='color-turno3' style='background:#FF1744;'></div>";
									curr_date.append(color);
									curr_date.addClass("event-date");
									valor++;
								}
							}

						}
						else {
							if (events[1].Estado == 1) {
								color = "<div class='color-turno' style='background:#6aa84f;'></div>";
								curr_date.append(color);
								curr_date.addClass("event-date");
							}
							else if (events[1].Estado == 2) {
								color = "<div class='color-turno' style='background:#FF1744;'></div>";
								curr_date.append(color);
								curr_date.addClass("event-date");
							} else {
								color = "<div class='color-turno' style='background:#f1c232;'></div>";
								curr_date.append(color);
								curr_date.addClass("event-date");
							}
						}
					}
					

					// Set onClick handler for clicking a date
					curr_date.click({ events: events, month: month, day: day }, date_click);
					row.append(curr_date);
				}
			}
			// Append the last row and set the current year
			calendar_days.append(row);
			$(".year").text(year);
			verificarFechas();
		}

			// Get the number of days in a given month/year
			function days_in_month(month, year) {
				var monthStart = new Date(year, month, 1);
				var monthEnd = new Date(year, month + 1, 1);
				return (monthEnd - monthStart) / (1000 * 60 * 60 * 24);
			}

			// Event handler for when a date is clicked
			function date_click(event) {
				$(".events-container").show(250);
		
				$(".active-date").removeClass("active-date");
				$(this).addClass("active-date");
				verificarFechas();
				//_events(event.data.events, event.data.month, event.data.day);
				mostrar_eventos(event.data.events, event.data.month +1, event.data.day);
			};

			// Event handler for when a month is clicked
			function month_click(event) {
				$(".events-container").show(250);
				
				var date = event.data.date;
				$(".active-month").removeClass("active-month");
				$(this).addClass("active-month");
				var new_month = $(".month").index(this);
				date.setMonth(new_month);
				init_calendar(date);
			}

			// Event handler for when the year right-button is clicked
			function next_year(event) {
				
				var date = event.data.date;
				var new_year = date.getFullYear() + 1;
				$("year").html(new_year);
				date.setFullYear(new_year);
				init_calendar(date);
			}

			// Event handler for when the year left-button is clicked
			function prev_year(event) {
				
				var date = event.data.date;
				var new_year = date.getFullYear() - 1;
				$("year").html(new_year);
				date.setFullYear(new_year);
				init_calendar(date);
			}

			// Event handler for clicking the new event button
			function new_event(event) {
				// if a date isn't selected then do nothing
				if ($(".active-date").length === 0)
					return;
				// remove red error input on click
				// empty inputs and hide events
				
				// Event handler for cancel button
				// Event handler for ok button
				$("#BtnTurno").unbind().click({ date: event.data.date }, function () {
						Swal.fire({
				icon:'warning',
				title: '¿Está seguro?',
				
				showCancelButton: true,
				confirmButtonText: 'Sí',
				cancelButtonText: `Cancelar`,
				reverseButtons: true,
				
			}).then((result) => {
				/* Read more about isConfirmed, isDenied below */
				if (result.isConfirmed) {
						$(".events-container").hide(0);
						var date = event.data.date;
						var day = parseInt($(".active-date").html());
						
						console.log("new event");
						//Falta ajax. Hay que setear el turno para los que estàn registrados y agregar
						var nombrePerros = [];
						var valor = $(".mascota").length;
						for (i = 1; i <= valor; i++) {
							var mascota = $("#mascota" + i + " select option:selected").val();

							if (mascota == 'Otra') {

								mascota = $("#mascota" + i + " div input").val();
							}
							nombrePerros.push(mascota);
						}

						var emailUsuario = $("#form-turnos").data('usuario-mail');
						var motive = document.getElementById('motivo').value;
						var fechaIso = actual.toISOString();
						var horarioSel = $("#horario").prop("selectedIndex");

						$.ajax({
							url: '@Url.Action("cargarTurno", "Turnos")',
							type: 'POST',
							dataType: 'json',
							data: { mail: emailUsuario, fecha: fechaIso, perros: nombrePerros, motivo: motive, horario: horarioSel }, // Enviar los datos al controlador

							success: function (data) {
								
								document.getElementById('form-turnos').reset();
								verificarFechas();
								for (var i = $(".mascota").length; i >= 1; i--) {
									($("#mascota" + i).remove());
								}

								
								asunto.classList.remove('is-invalid'); asunto.classList.remove('is-valid');
								enviarButtonContacto.disabled = true;
								agregarCamposMascota();
								$(".events-container").show();

								if (data.asignado) {
									var turno = JSON.parse(data.asignado);
									event_data["events"].push(turno);
									let timerInterval;
									Swal.fire({
										title: 'Registro de turno exitoso',
										icon: 'success',
										timer: 5000,
										timerProgressBar: true,
										willClose: () => {
											clearInterval(timerInterval)

										}
									});


									//new_event_json(name, count, date, day);
								}
								else {
									Swal.fire({
										icon: 'error',
										title: 'Error',
										text: 'Ya tiene un turno para la fecha'
									});
								}
								date.setDate(day);
								init_calendar(date);
								

							},
							error: function (xhr, status, error) {
								Swal.fire({
									icon: 'error',
									title: 'Oops...',
									text: 'Ocurrio un erorr!'
								})
								
							},
							complete: function(){
								$('#ModalDatosTurno').modal('hide');
							}
						});
				}
				});
					
					
					

					
					

				});


			}
		


			// Given data for events in JSON format

			



			function chequear_events(day, month, year) {
				var events = [];
				var actual=new Date(year,month-1,day);
				
				
				var fechaIso=actual.toISOString();
				fechaIso=fechaIso.substr(0,10);
				events.push(event_data["events"][0]);
				
				for (var i = 1; i < event_data["events"].length; i++) {
					
					var event = event_data["events"][i];
					
					var fechaDb=(event.Fecha.substr(0,10));
					
					if (fechaDb==fechaIso) {
						events.push(event);
					
					}
				}
				return events;
			}

			function ordenarPendientes(a,b){
			let retVal = 0;
			if (a.Horario < b.Horario) {
				retVal = -1;
			} else if (a.Horario > b.Horario) {
				retVal = 1;
			}
			return retVal;
			}

		function mostrarPendientes(events) {
			var pendientes = (events.filter(i => i.Estado == 3).sort(ordenarPendientes));

			var event_card = $("<div class='event-card d-flex text-end'></div>");
			var descripcion = $("<span class='align-self-center'>Eventos pendientes: " + pendientes.length + "</span>")
			var button = $("<button class='btn  alinearDerecha' style='background-color:#e68a19;color:white' type='button' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>Mostrar</button>");
			event_card.append(descripcion);
			if (pendientes.length > 0) {
				event_card.append(button);
			}
			$(".events-container").append(event_card);
			for (var i = 0; i < pendientes.length; i++) {
				var event_card = $("<div class='event-card d-none tarjeta-pendiente'></div>");
				var event_name = $("<div class='event-name'>El cliente " + pendientes[i].Cliente + " ha solicitado un turno. <br>Franja: " + pendientes[i].Horario+"<br>Motivo: "+pendientes[i].Motivo+"</div>");
				
				$(event_card).css({
					"border-left": "10px solid #f1c232"
				});
				event_count = $("<div class='event-cancelled'>Pendiente</div>");
				var event_button = $("<button class='btn btn-primary mt-2' onclick='verDetalle(" + pendientes[i].Id + ")'>Ver detalle</button>");
				$(event_card).append(event_name);
				
				var contenedorBoton = $("<div class='d-flex justify-content-end'></div>");
				$(contenedorBoton).append(event_button);
				$(event_card).append(contenedorBoton);
				
				$(".events-container").append(event_card);
				

			}

			button.on("click", function () {
				$(".tarjeta-pendiente").toggleClass("d-none");
				if (button.text() == "Mostrar") {
					button.text("Ocultar");
				} else {
					button.text("Mostrar");
				}
			});
		}
		

		function mostrarRechazados(events){
			var rechazados = (events.filter(i => i.Estado == 2).sort(ordenarPendientes));
			var event_card = $("<div class='event-card d-flex text-end'></div>");
			var descripcion = $("<span class='align-self-center'>Eventos rechazados: " + rechazados.length + "</span>")
			var button = $("<button class='btn btn-secondary alinearDerecha'style='background-color:#e68a19;color:white' type='button' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>Mostrar</button>");
			event_card.append(descripcion);
			if (rechazados.length > 0) {
				event_card.append(button);
			}
			$(".events-container").append(event_card);
			for (var i = 0; i < rechazados.length; i++) {
				var event_card = $("<div class='event-card d-none tarjeta-rechazado'></div>");
				
				var event_name = $("<div class='event-name'>El cliente " + rechazados[i].Cliente + " tiene un turno rechazado en la franja " + rechazados[i].Horario 
+"<br>Comentario: "+rechazados[i].Comentario+"</div>");
				
				$(event_card).css({
					"border-left": "10px solid #FF1744"
				});
				event_count = $("<div class='event-cancelled'>Rechazado</div>");
				var event_button = $("<button class='btn btn-primary align-self-end mt-2'  onclick='verDetalle(" + rechazados[i].Id + ")' >Ver detalle</button>")
				$(event_card).append(event_name);

				var contenedorBoton = $("<div class='d-flex justify-content-end'></div>");
				$(contenedorBoton).append(event_button);
				$(event_card).append(contenedorBoton);
				$(".events-container").append(event_card);


			}

			button.on("click",function(){
				$(".tarjeta-rechazado").toggleClass("d-none");
				if(button.text()=="Mostrar"){
				button.text("Ocultar");
				}else
				{
					button.text("Mostrar");
				}
			});

		}
		function ordenarPorHorario(a,b){
			let retVal = 0;
			if (a.HorarioFinal < b.HorarioFinal) {
				retVal = -1;
			} else if (a.HorarioFinal > b.HorarioFinal ) {
				retVal = 1;
			}
			return retVal;
		} 
		function mostrarAceptados(events){
			var aceptados = (events.filter(i => i.Estado == 1).sort(ordenarPorHorario));
			var event_card = $("<div class='event-card d-flex text-end'></div>");
			var descripcion = $("<span class='align-self-center'>Eventos aceptados: " + aceptados.length + "</span>")
			var button = $("<button class='btn btn-secondary alinearDerecha' type='button' style='background-color:#e68a19;color:white' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>Mostrar</button>");
			event_card.append(descripcion);
			if (aceptados.length > 0) {
				event_card.append(button);
			}
			$(".events-container").append(event_card);
			for (var i = 0; i < aceptados.length; i++) {
				var event_card = $("<div class='event-card d-none tarjeta-aceptado'></div>");

				var event_name = $("<div class='event-name'>El cliente " + aceptados[i].Cliente + " tiene un turno aceptado a las " + aceptados[i].HorarioFinal + ".<br>Motivo: " + aceptados[i].Motivo + "</div>");
				
				$(event_card).css({
					"border-left": "10px solid #6aa84f"
				});
				event_count = $("<div class='event-cancelled'>Aceptado</div>");
				var event_button = $("<button class='btn btn-primary align-self-end mt-2'  onclick='verDetalle(" + aceptados[i].Id + ")' >Ver detalle</button>")
				$(event_card).append(event_name);

				var contenedorBoton = $("<div class='d-flex justify-content-end'></div>");
				$(contenedorBoton).append(event_button);
				$(event_card).append(contenedorBoton);
				$(".events-container").append(event_card);
			}
			button.on("click",function(){
				$(".tarjeta-aceptado").toggleClass("d-none");
				if(button.text()=="Mostrar"){
					button.text("Ocultar");
				}else
				{
					button.text("Mostrar");
				}
			});

		}


		function noTienenElementos(idsElementosActivos, events) {
			
			for (i = 0; i < idsElementosActivos.length; i++) {
				if (idsElementosActivos[i] == "pendientes-check") {
					if (events.filter(i => i.Estado == 3).length > 0)
						return false;
				}
				if (idsElementosActivos[i] == "aceptados-check") {
					if (events.filter(i => i.Estado == 1).length > 0)
						return false;
				}
				if (idsElementosActivos[i] == "rechazados-check") {
					if (events.filter(i => i.Estado == 2).length > 0)
						return false;


				}
			}
			return true;
		}

		function mostrar_eventos(events, month, day) {
			var evento;
			$(".events-container").empty();
			$(".events-container").show(250);

			if (events[0] == true) {
					var idsElementosActivos = $(".estados.activa").map(function () {
						return this.id;
					}).get();
					if (noTienenElementos(idsElementosActivos,events)){
					var event_card = $("<div class='event-card d-flex flex-column'></div>");
					var event_name = $("<div class='event-name mb-3'>No tiene turnos con los estados seleccionados para el " + day + "/" + month + ".</div>");
					$(event_card).css({ "border-left": "10px solid #FF1744" });
					$(event_card).append(event_name);
					$(".events-container").append(event_card);
				}
				else {

					// Go through and add each event as a card to the events container
					if ($("#pendientes-check").hasClass("activa")) {
						mostrarPendientes(events);
					}
					if ($("#aceptados-check").hasClass("activa")) {
						mostrarAceptados(events);
					}
					if ($("#rechazados-check").hasClass("activa")) {
						mostrarRechazados(events);
					}
					
				}
			}
			else {

				if (events.length == 1) {

					var event_card = $("<div class='event-card d-flex flex-column'></div>");
					var event_name = $("<div class='event-name mb-3'>No tiene turnos para el " + day + "/" + month + ".</div>");
					$(event_card).css({ "border-left": "10px solid #FF1744" });

					$(event_card).append(event_name);

					$(".events-container").append(event_card);
				}
				else {

					// Go through and add each event as a card to the events container
					var event_card = $("<div class='event-card'></div>");
					var event_name = $("<div> Motivo del turno: " + events[1].Motivo + "</div>");
					var perrosAfectados="Perros: "

					
						$.each(events[1].PerrosDelTurno, function (index, perroTurno) {
							
						if(index+1<=events[1].PerrosDelTurno.length-2){
								perrosAfectados += perroTurno.Nombre +", ";
						
						}else{
							if (index + 1 == events[1].PerrosDelTurno.length-1){
								perrosAfectados += perroTurno.Nombre + " y ";
							}else{
								perrosAfectados+=perroTurno.Nombre;
							}
						}

					});
					var event_Perros = $("<div>" + perrosAfectados + "</div>");
					var event_Horario = $("<div>Horario elegido: " + events[1].Horario + "</div>");
					var event_count;
					var contenedorComentario= $("<div></div>");
					var comentario;
					if (events[1].Estado === 2) {
						$(event_card).css({
							"border-left": "10px solid #FF1744"
						});
						event_count = $("<div>Estado: cancelado</div>");
						var comentario = $("<div>Comentario: " + events[1].Comentario+ "</div>");
						contenedorComentario.append(comentario);
					} else {
						if (events[1].Estado == 1) {
							$(event_card).css({
								"border-left": "10px solid #6aa84f"
							});
							var event_Horario = $("<div>Horario del turno: " + events[1].HorarioFinal + "</div>");
							event_count = $("<div>Estado: aceptado</div>");
							var comentario = $("<div>Comentario: " + events[1].Comentario+ "</div>");
							if (events[1].Comentario!=null){
							contenedorComentario.append(comentario);
							}
						} else {

							$(event_card).css({
								"border-left": "10px solid #f1c232"
							});
							event_count = $("<div>Estado: pendiente</div>");

						}
					}
					//var event_button = $("<button class='btn btn-primary align-self-end' onclick='verDetalle(" + events[1].Id + ")' >Ver detalle</button>")
					
					
					$(event_card).append(event_name).append(event_count).append(event_Perros).append(event_Horario).append(contenedorComentario);

					$(".events-container").append(event_card);
				}
			}
		}


		

		function verDetalle(idTurno) {
			var turno=event_data["events"].filter(m=>m.Id==idTurno);
			
			if(turno[0].Estado==1){
				
				
				$("#horarioAceptado").val(turno[0].Horario);
				$('#horarioFinalAceptado').val(turno[0].HorarioFinal);
				$('#comentarioAceptado').val(turno[0].Comentario);
				$("#motivoAceptado").val(turno[0].Motivo);
				var perrosAfectados = "";
				$.each(turno[0].PerrosDelTurno, function (index, perroTurno) {

					if (index + 1 <= turno[0].PerrosDelTurno.length - 2) {
						perrosAfectados += perroTurno.Nombre + ", ";

					} else {
						if (index + 1 == turno[0].PerrosDelTurno.length - 1) {
							perrosAfectados += perroTurno.Nombre + " y ";
						} else {
							perrosAfectados += perroTurno.Nombre;
						}
					}

				});
				$("#mailAceptado").val(turno[0].Cliente);
				$("#fechaAceptado").val(turno[0].Fecha.substr(0, 10));
				$("#mascotasAceptado").val(perrosAfectados);
				$("#detalleAceptado").modal("show");
			} else if (turno[0].Estado == 2){

				$("#horarioRechazado").val(turno[0].Horario);
				$('#horarioFinalRechazado').val(turno[0].HorarioFinal);
				$('#comentarioRechazado').val(turno[0].Comentario);
				$("#motivoRechazado").val(turno[0].Motivo);
				var perrosAfectados = "";
				$.each(turno[0].PerrosDelTurno, function (index, perroTurno) {

					if (index + 1 <= turno[0].PerrosDelTurno.length - 2) {
						perrosAfectados += perroTurno.Nombre + ", ";

					} else {
						if (index + 1 == turno[0].PerrosDelTurno.length - 1) {
							perrosAfectados += perroTurno.Nombre + " y ";
						} else {
							perrosAfectados += perroTurno.Nombre;
						}
					}

				});
				$("#mailRechazado").val(turno[0].Cliente);
				$("#fechaRechazado").val(turno[0].Fecha.substr(0, 10));
				$("#mascotasRechazado").val(perrosAfectados);

				$("#detalleRechazado").modal("show");
			}
			else{
				
				$("#rechazar-button").attr("data-id-turno",idTurno);
				$("#aceptar-button").attr("data-id-turno", idTurno);
				$("#horarioPendiente").val(turno[0].Horario);
				$("#comentario").removeClass("is-valid");
				$("#comentario").removeClass("is-invalid");
				$("#horarioFinalPendiente").removeClass("is-valid");
				$("#horarioFinalPendiente").removeClass("is-invalid");
				$('#horarioFinalPendiente').val('');
				$('#comentario').val('');
				$("#rechazar-button").attr("disabled",true);
				$("#aceptar-button").attr("disabled",true);

				var perrosAfectados="";
				$.each(turno[0].PerrosDelTurno, function (index, perroTurno) {

					if (index + 1 <= turno[0].PerrosDelTurno.length - 2) {
						perrosAfectados += perroTurno.Nombre + ", ";

					} else {
						if (index + 1 == turno[0].PerrosDelTurno.length - 1) {
							perrosAfectados += perroTurno.Nombre + " y ";
						} else {
							perrosAfectados += perroTurno.Nombre;
						}
					}

				});
				if (turno[0].Horario == "Mañana (8 a 13 hs)"){
					
					$("#horarioFinalPendiente").attr("min", "08:00");
				$("#horarioFinalPendiente").attr("max", "13:00");
				} else {
					$("#horarioFinalPendiente").attr("min","17:00");
					$("#horarioFinalPendiente").attr("max","20:00");
				}
				
				$("#mascotasPendiente").val(perrosAfectados);
				$("#motivoPendiente").val(turno[0].Motivo);
				$("#mailPendiente").val(turno[0].Cliente);
			
				$("#fechaPendiente").val(turno[0].Fecha.substr(0, 10));

				$("#detallePendiente").modal("show");
			}
			
		}

		function validarRechazar(){
			if($("#comentario").hasClass('is-valid')){
				$("#rechazar-button").prop("disabled",false);
			}else{
				$("#rechazar-button").prop("disabled", true);
			}
		}

		$("#comentario").on('keyup',function(){
			if ($("#comentario").val()!=''){
				$("#comentario").addClass('is-valid');
				$("#comentario").removeClass('is-invalid');

			} else
			{
				$("#comentario").addClass('is-invalid');
				$("#comentario").removeClass('is-valid');
			}
			validarRechazar();
		});

		function rechazarTurno(){
			Swal.fire({
				icon: 'warning',
				title: '¿Está seguro?',

				showCancelButton: true,
				confirmButtonText: 'Sí',
				cancelButtonText: `Cancelar`,
				reverseButtons: true,

			}).then((result) => {
			
			if (result.isConfirmed){
					$(".events-container").empty();
					var idTurno = $("#rechazar-button").attr("data-id-turno");
					var turno = event_data["events"].filter(m => m.Id == idTurno);

					var horario = $("horarioFinalPendiente").val();
					var comment = $("#comentario").val();
					var index = event_data["events"].findIndex(el => el.Id === idTurno);




					$.ajax({
						url: '@Url.Action("rechazarTurno", "Turnos")',
						type: 'POST',
						async: true,
						dataType: 'json',
						data: { idTurno: idTurno, comentario: comment, horario: horario }, // Enviar los datos al controlador
						success: function (data) {
							$(".events-container").empty();
							var rechazado = JSON.parse(data.turno);
							turno[0].Estado = 2;
							turno[0].Comentario = rechazado.Comentario;
							turno[0].HorarioFinal = rechazado.HorarioFinal;
							turno[0].Id = rechazado.Id;
							event_data["events"][index] = turno[0];

							var date = new Date(rechazado.Fecha.substr(0, 10));
							date.setDate(date.getDate() + 1);
							var day = parseInt($(".active-date").html());
							date.setDate(day);
							init_calendar(date);
							let timerInterval;
							Swal.fire({
								title: 'Turno rechazado con éxito',
								icon: 'success',
								timer: 5000,
								timerProgressBar: true,
								willClose: () => {
									clearInterval(timerInterval)
								}
							});
							
						},
						error: function (xhr, status, error) {
							Swal.fire({
								icon: 'error',
								title: 'Oops...',
								text: 'Ocurrio un erorr!'
							})
							
						},
						complete: function(){
							$("#detallePendiente").modal("hide");
						}
					});

			};
			
			});

			
		}
	

		
		$("#aceptados-check").on('click',function(){
		
			var fecha = new Date();
			fecha.setFullYear($("#label.year").html());
			fecha.setMonth(meses[($(".active-month").html())]);
			fecha.setDate(parseInt($(".active-date").html()));
			$("#aceptados-check").toggleClass("activa");
			
			init_calendar(fecha);
		});

		$("#rechazados-check").on('click', function () {
			
			var fecha = new Date();
			fecha.setFullYear($("#label.year").html());
			fecha.setMonth(meses[($(".active-month").html())]);
			fecha.setDate(parseInt($(".active-date").html()));
			$("#rechazados-check").toggleClass("activa");
			
			init_calendar(fecha);
		});
		$("#pendientes-check").on('click', function () {
			
				
				$("#pendientes-check").toggleClass("activa");
				
				var fecha = new Date();
				fecha.setFullYear($("#label.year").html());
				fecha.setMonth(meses[($(".active-month").html())]);
				fecha.setDate(parseInt($(".active-date").html()));
			
				init_calendar(fecha);
			

		});
		

		function obtenerHorarioActual() {
			var fechaActual = new Date();
			var hora = fechaActual.getHours().toString().padStart(2, "0");
			var minutos = fechaActual.getMinutes().toString().padStart(2, "0");
			return hora + ":" + minutos;
		}

		function esMayor(horario1, horario2) {
			return horario1 > horario2;
		}
		var time;
		function llamador(fecha1,fecha2){
			clearTimeout(time);
			time=setTimeout(function () {
				$('#horarioFinalPendiente').trigger('change');
			}, fecha2 - fecha1);
		
			}


		function validarAceptar(){
			if ($("#horarioFinalPendiente").hasClass('is-valid')) {
				
				$("#aceptar-button").prop("disabled",false);
			}else{
				$("#aceptar-button").prop("disabled", true);
			}
		}
		//Toca revisar
		$("#horarioFinalPendiente").on('change', function verificarHorario() {
			var horarioUsuario = document.getElementById("horarioFinalPendiente").value;
			var horarioActual = obtenerHorarioActual();
			var idTurno = $("#aceptar-button").attr("data-id-turno");
			
			
			var turno = event_data["events"].filter(m => m.Id == idTurno);


			var fecha1 = new Date(Date.now());
			
			var fecha2 = new Date(turno[0].Fecha.substr(0, 10));
			fecha2.setDate(fecha2.getDate()+1);
			fecha1.setHours(parseInt(horarioActual.split(':')[0]), parseInt(horarioActual.split(':')[1]), 0, 0);
			fecha2.setHours(parseInt(horarioUsuario.split(':')[0]), parseInt(horarioUsuario.split(':')[1]),0, 0);
			if (turno[0].Horario == 'Mañana (8 a 13 hs)'){
				if ((fecha2.getTime()>=fecha1.getTime()) && esMayor(horarioUsuario,'07:59') && esMayor('13:01',horarioUsuario)) {
					$("#horarioFinalPendiente").addClass('is-valid')
					$("#horarioFinalPendiente").removeClass('is-invalid');
					llamador(fecha1, fecha2);
				} else {
					$("#horarioFinalPendiente").removeClass('is-valid'); 
					$("#horarioFinalPendiente").addClass('is-invalid')
				}
			} else if ((fecha2.getTime() >= fecha1.getTime()) && esMayor(horarioUsuario, '16:59') && esMayor('20:01', horarioUsuario)) {
				$("#horarioFinalPendiente").addClass('is-valid')
				$("#horarioFinalPendiente").removeClass('is-invalid')
				llamador(fecha1, fecha2);
			} else {
				$("#horarioFinalPendiente").removeClass('is-valid');
				$("#horarioFinalPendiente").addClass('is-invalid')
			}
			validarAceptar();

			
		});
		function aceptarTurno() {
			Swal.fire({
				icon:'warning',
				title: '¿Está seguro?',
				
				showCancelButton: true,
				confirmButtonText: 'Sí',
				cancelButtonText: `Cancelar`,
				reverseButtons: true,
				
			}).then((result) => {
				/* Read more about isConfirmed, isDenied below */
				if (result.isConfirmed) {
					$(".events-container").empty();
					var idTurno = $("#aceptar-button").attr("data-id-turno");

					var turno = event_data["events"].filter(m => m.Id == idTurno);

					var horario = $("#horarioFinalPendiente").val();

					var comment = $("#comentario").val();
					var index = event_data["events"].findIndex(el => el.Id === idTurno);





					$.ajax({
						url: '@Url.Action("aceptarTurno", "Turnos")',
						type: 'POST',
						async: true,
						dataType: 'json',
						data: { idTurno: idTurno, comentario: comment, horario: horario }, // Enviar los datos al controlador
						success: function (data) {
							$(".events-container").empty();
							var aceptado = JSON.parse(data.turno);
							turno[0].Estado = 1;
							turno[0].Comentario = aceptado.Comentario;
							turno[0].HorarioFinal = aceptado.HorarioFinal;
							turno[0].Id = aceptado.Id;
							event_data["events"][index] = turno[0];


							var date = new Date(aceptado.Fecha.substr(0, 10));
							date.setDate(date.getDate() + 1);
							var day = parseInt($(".active-date").html());
							date.setDate(day);
							init_calendar(date);
							let timerInterval;
							Swal.fire({
								title: 'Turno aceptado con éxito',
								icon: 'success',
								timer: 5000,
								timerProgressBar: true,
								willClose: () => {
									clearInterval(timerInterval)
								}
							});
							
						},
						error: function (xhr, status, error) {
							Swal.fire({
								icon: 'error',
								title: 'Oops...',
								text: 'Ocurrio un erorr!'
							})
							
						},
						complete : function(){
							$("#detallePendiente").modal("hide");
						}
					});
					
				}
			})
			
				
			}

		function borrarMañana() {
			// Aquí colocas el código del método que deseas ejecutar a las 13:00

			$.ajax({
				url: '@Url.Action("borrarMañana", "Turnos")',
				type: 'POST',
				async: false,
				dataType: 'json',
				data: {}, // Enviar los datos al controlador
				success: function (data) {
					let timerInterval
					Swal.fire({
						title: 'Actualizando horarios y turnos',
						icon: 'warning',
						timer: 5000,
						timerProgressBar: true,
						willClose: () => {
							clearInterval(timerInterval)
						}
					}).then((result) => {
						/* Read more about handling dismissals below */
						location.reload();
					})
				},
				error: function (xhr, status, error) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Ocurrio un erorr!'
					})
				}
			});
			location.reload();
		}

		function planificarBorrarMañana() {
			var ahora = new Date();
			var horaDeseada = new Date();

			// Establecer la hora deseada en 13:00 (1:00 PM)
			horaDeseada.setHours(13, 00, 0, 0);

			var tiempoRestante = horaDeseada.getTime() - ahora.getTime();

			if (tiempoRestante <= 0) {
				// La hora deseada ya ha pasado, ejecutar el método inmediatamente
				//
			} else {
				// Planificar la ejecución del método usando setTimeout
				setTimeout(borrarMañana, tiempoRestante);
			}
		}

		// Llamar a la función planificarEjecucion para iniciar el proceso de planificación




		function ejecutarBorradoTarde() {
			// Aquí colocas el código del método que deseas ejecutar a las 13:00

			$.ajax({
				url: '@Url.Action("borrarTarde", "Turnos")',
				type: 'POST',
				async: false,
				dataType: 'json',
				data: {}, // Enviar los datos al controlador
				success: function (data) {
					let timerInterval
					Swal.fire({
						title: 'Actualizando horarios y turnos',
						icon: 'warning',
						timer: 5000,
						timerProgressBar: true,
						willClose: () => {
							clearInterval(timerInterval)
						}
					}).then((result) => {
						/* Read more about handling dismissals below */
						location.reload();
					})
				},
				error: function (xhr, status, error) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Ocurrio un erorr!'
					})
				}
			});
			
		}

		function planificarBorradoTarde() {
			var ahora = new Date();
			var horaDeseada = new Date();

			// Establecer la hora deseada en 13:00 (1:00 PM)
			horaDeseada.setHours(20, 0, 0, 0);

			var tiempoRestante = horaDeseada.getTime() - ahora.getTime();

			if (tiempoRestante <= 0) {
				// La hora deseada ya ha pasado, ejecutar el método inmediatamente
				//
			} else {
				// Planificar la ejecución del método usando setTimeout
				setTimeout(ejecutarBorradoTarde, tiempoRestante);
			}
		}

		// Llamar a la función planificarEjecucion para iniciar el proceso de planificación
		planificarBorrarMañana();
		planificarBorradoTarde();
	</script>
}
